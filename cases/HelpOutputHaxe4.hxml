Haxe Compiler 4.2.0-rc.1+5ce697efb - (C)2005-2020 Haxe Foundation
Usage: haxe.exe <target> [options] [hxml files and dot paths...]

Target:
  --js <file>                           compile JavaScript code into target file
  --lua <file>                          compile Lua code into target file
  --swf <file>                          compile Flash SWF bytecode into target file
  --neko <file>                         compile Neko bytecode into target file
  --php <directory>                     compile PHP code into target directory
  --cpp <directory>                     compile C++ code into target directory
  --cppia <file>                        compile Cppia bytecode into target file
  --cs <directory>                      compile C# code into target directory
  --java <directory>                    compile Java code into target directory
  --jvm <file>                          compile JVM bytecode into target file
  --python <file>                       compile Python code into target file
  --hl <file>                           compile HashLink .hl bytecode or .c code into target file
  --interp                              interpret the program using internal macro system
  --run <module> [args...]              interpret a Haxe module with command line arguments

Compilation:
  -p,
  --class-path <path>               add a directory to find source files
  -m,
  --main <class>                    select startup class
  -L,
  --library <name[:ver]>            use a haxelib library
  -D,
  --define <var[=value]>            define a conditional compilation flag
  -r,
  --resource <file>[@name]          add a named resource file
  --cmd <command>                       run the specified command after successful compilation
  --remap <package:target>              remap a package to another one
  # --macro <macro>                       call the given macro before typing anything else
  -C,
  --cwd <dir>                       set current working directory
  --haxelib-global                      pass --global argument to haxelib

Optimization:
  --dce [std|full|no]                   set the dead code elimination mode (default std)
  --no-traces                           don't compile trace calls in the program
  --no-output                           compiles but does not generate any file
  --no-inline                           disable inlining
  --no-opt                              disable code optimizations

Debug:
  -v,
  --verbose                         turn on verbose mode
  --debug                               add debug information to the compiled code
  --prompt                              prompt on error
  --times                               measure compilation times

Batch:
  --next                                separate several haxe compilations
  --each                                append preceding parameters to all Haxe compilations separated by --next

Services:
  --display                             display code tips
  --xml <file>                          generate XML types description
  --json <file>                         generate JSON types description

Compilation Server:
  --server-listen [[host:]port]|stdio]  wait on the given port (or use standard i/o) for commands to run
  --server-connect [host:]port]         connect to the given port and wait for commands to run
  --connect <[host:]port>               connect on the given port and run commands there

Target-specific:
  --swf-version <version>               change the SWF version
  --swf-header <header>                 define SWF header (width:height:fps:color)
  --flash-strict                        more type strict flash API
  --swf-lib <file>                      add the SWF library to the compiled SWF
  --swf-lib-extern <file>               use the SWF library for type checking
  --java-lib <file>                     add an external JAR or class directory library
  --net-lib <file>[@std]                add an external .NET DLL file
  --net-std <file>                      add a root std .NET DLL search path
  --c-arg <arg>                         pass option <arg> to the native Java/C# compiler

Miscellaneous:
  --version                             print version and exit
  -h,
  --help                            show extended help information
  --help-defines                        print help for all compiler specific defines
  --help-metas                          print help for all compiler metadatas
